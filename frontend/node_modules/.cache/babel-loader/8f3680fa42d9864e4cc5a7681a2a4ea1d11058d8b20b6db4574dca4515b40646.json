{"ast":null,"code":"import{useState,useCallback,useEffect}from'react';export const useVoiceSearch=()=>{const[state,setState]=useState({isListening:false,transcript:'',isSupported:false,error:null});const[recognition,setRecognition]=useState(null);useEffect(()=>{// Check if browser supports Speech Recognition\nconst SpeechRecognition=window.SpeechRecognition||window.webkitSpeechRecognition;if(SpeechRecognition){const recognitionInstance=new SpeechRecognition();// Configure recognition settings\nrecognitionInstance.continuous=true;recognitionInstance.interimResults=true;recognitionInstance.lang='en-US';// Set up event handlers\nrecognitionInstance.onstart=()=>{setState(prev=>({...prev,isListening:true,error:null}));};recognitionInstance.onresult=event=>{let finalTranscript='';let interimTranscript='';for(let i=event.resultIndex;i<event.results.length;i++){const transcript=event.results[i][0].transcript;if(event.results[i].isFinal){finalTranscript+=transcript;}else{interimTranscript+=transcript;}}setState(prev=>({...prev,transcript:finalTranscript||interimTranscript}));};recognitionInstance.onerror=event=>{let errorMessage='Voice recognition error occurred';switch(event.error){case'no-speech':errorMessage='No speech was detected. Please try again.';break;case'audio-capture':errorMessage='Audio capture failed. Please check your microphone.';break;case'not-allowed':errorMessage='Microphone access was denied. Please allow microphone access.';break;case'network':errorMessage='Network error occurred. Please check your connection.';break;case'service-not-allowed':errorMessage='Speech recognition service is not allowed.';break;case'bad-grammar':errorMessage='Speech recognition grammar error.';break;case'language-not-supported':errorMessage='Language not supported.';break;default:errorMessage=`Voice recognition error: ${event.error}`;}setState(prev=>({...prev,isListening:false,error:errorMessage}));};recognitionInstance.onend=()=>{setState(prev=>({...prev,isListening:false}));};setRecognition(recognitionInstance);setState(prev=>({...prev,isSupported:true}));}else{setState(prev=>({...prev,isSupported:false,error:'Speech recognition is not supported in this browser.'}));}},[]);const startListening=useCallback(()=>{if(recognition&&state.isSupported){try{setState(prev=>({...prev,transcript:'',error:null}));recognition.start();}catch(error){setState(prev=>({...prev,error:'Failed to start voice recognition.'}));}}},[recognition,state.isSupported]);const stopListening=useCallback(()=>{if(recognition&&state.isListening){try{recognition.stop();}catch(error){setState(prev=>({...prev,error:'Failed to stop voice recognition.'}));}}},[recognition,state.isListening]);const clearTranscript=useCallback(()=>{setState(prev=>({...prev,transcript:''}));},[]);const clearError=useCallback(()=>{setState(prev=>({...prev,error:null}));},[]);return{// State\nisListening:state.isListening,transcript:state.transcript,isSupported:state.isSupported,error:state.error,// Actions\nstartListening,stopListening,clearTranscript,clearError};};","map":{"version":3,"names":["useState","useCallback","useEffect","useVoiceSearch","state","setState","isListening","transcript","isSupported","error","recognition","setRecognition","SpeechRecognition","window","webkitSpeechRecognition","recognitionInstance","continuous","interimResults","lang","onstart","prev","onresult","event","finalTranscript","interimTranscript","i","resultIndex","results","length","isFinal","onerror","errorMessage","onend","startListening","start","stopListening","stop","clearTranscript","clearError"],"sources":["/workspace/frontend/src/hooks/useVoiceSearch.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\ninterface VoiceSearchState {\n  isListening: boolean;\n  transcript: string;\n  isSupported: boolean;\n  error: string | null;\n}\n\nexport const useVoiceSearch = () => {\n  const [state, setState] = useState<VoiceSearchState>({\n    isListening: false,\n    transcript: '',\n    isSupported: false,\n    error: null,\n  });\n\n  const [recognition, setRecognition] = useState<SpeechRecognition | null>(null);\n\n  useEffect(() => {\n    // Check if browser supports Speech Recognition\n    const SpeechRecognition = window.SpeechRecognition || (window as any).webkitSpeechRecognition;\n    \n    if (SpeechRecognition) {\n      const recognitionInstance = new SpeechRecognition();\n      \n      // Configure recognition settings\n      recognitionInstance.continuous = true;\n      recognitionInstance.interimResults = true;\n      recognitionInstance.lang = 'en-US';\n      \n      // Set up event handlers\n      recognitionInstance.onstart = () => {\n        setState(prev => ({\n          ...prev,\n          isListening: true,\n          error: null,\n        }));\n      };\n\n      recognitionInstance.onresult = (event: SpeechRecognitionEvent) => {\n        let finalTranscript = '';\n        let interimTranscript = '';\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript;\n          if (event.results[i].isFinal) {\n            finalTranscript += transcript;\n          } else {\n            interimTranscript += transcript;\n          }\n        }\n\n        setState(prev => ({\n          ...prev,\n          transcript: finalTranscript || interimTranscript,\n        }));\n      };\n\n      recognitionInstance.onerror = (event: SpeechRecognitionErrorEvent) => {\n        let errorMessage = 'Voice recognition error occurred';\n        \n        switch (event.error) {\n          case 'no-speech':\n            errorMessage = 'No speech was detected. Please try again.';\n            break;\n          case 'audio-capture':\n            errorMessage = 'Audio capture failed. Please check your microphone.';\n            break;\n          case 'not-allowed':\n            errorMessage = 'Microphone access was denied. Please allow microphone access.';\n            break;\n          case 'network':\n            errorMessage = 'Network error occurred. Please check your connection.';\n            break;\n          case 'service-not-allowed':\n            errorMessage = 'Speech recognition service is not allowed.';\n            break;\n          case 'bad-grammar':\n            errorMessage = 'Speech recognition grammar error.';\n            break;\n          case 'language-not-supported':\n            errorMessage = 'Language not supported.';\n            break;\n          default:\n            errorMessage = `Voice recognition error: ${event.error}`;\n        }\n\n        setState(prev => ({\n          ...prev,\n          isListening: false,\n          error: errorMessage,\n        }));\n      };\n\n      recognitionInstance.onend = () => {\n        setState(prev => ({\n          ...prev,\n          isListening: false,\n        }));\n      };\n\n      setRecognition(recognitionInstance);\n      setState(prev => ({ ...prev, isSupported: true }));\n    } else {\n      setState(prev => ({\n        ...prev,\n        isSupported: false,\n        error: 'Speech recognition is not supported in this browser.',\n      }));\n    }\n  }, []);\n\n  const startListening = useCallback(() => {\n    if (recognition && state.isSupported) {\n      try {\n        setState(prev => ({ ...prev, transcript: '', error: null }));\n        recognition.start();\n      } catch (error) {\n        setState(prev => ({\n          ...prev,\n          error: 'Failed to start voice recognition.',\n        }));\n      }\n    }\n  }, [recognition, state.isSupported]);\n\n  const stopListening = useCallback(() => {\n    if (recognition && state.isListening) {\n      try {\n        recognition.stop();\n      } catch (error) {\n        setState(prev => ({\n          ...prev,\n          error: 'Failed to stop voice recognition.',\n        }));\n      }\n    }\n  }, [recognition, state.isListening]);\n\n  const clearTranscript = useCallback(() => {\n    setState(prev => ({ ...prev, transcript: '' }));\n  }, []);\n\n  const clearError = useCallback(() => {\n    setState(prev => ({ ...prev, error: null }));\n  }, []);\n\n  return {\n    // State\n    isListening: state.isListening,\n    transcript: state.transcript,\n    isSupported: state.isSupported,\n    error: state.error,\n    \n    // Actions\n    startListening,\n    stopListening,\n    clearTranscript,\n    clearError,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}